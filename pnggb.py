# PNGGB.py by Angus Goucher, 2022
# converts a 128x128 png spritesheet to a C Header for use
# with GBDK.

import PIL.Image
import math
import sys


def main():
    # Must pass image file
    assert len(sys.argv) > 1, "Please specify image path."

    # Load image and figure out name
    name = sys.argv[1].split(".")[0]
    image_file = PIL.Image.open(sys.argv[1])
    image_data = image_file.load()

    assert image_file.width == 128, "Must be 128x128."
    assert image_file.height == 128, "Must be 128x128."

    # Convert the image to numbers for each color
    tiles = []
    for tile_id in range(16 * 16):
        tile = []
        for row in range(8):  # each pixel row in the tile
            lo_bits = []
            hi_bits = []
            for pix in range(8):  # each pixel in the row
                tile_x = (tile_id % 16) * 8
                tile_y = math.floor(tile_id / 16) * 8
                pixel = image_data[tile_x + pix, tile_y + row]

                assert pixel < 4, "Only 4 colors allowed in image."

                lo_bits.append(1 if pixel in [1, 3] else 0)
                hi_bits.append(1 if pixel in [2, 3] else 0)
            tile.append(lo_bits)
            tile.append(hi_bits)
        tiles.append(tile)

    # Convert the data to C code
    tiles_hex_str = ""
    for tile in tiles:
        for row in tile:
            byte = row[0] * 128 + \
                row[1] * 64 + \
                row[2] * 32 + \
                row[3] * 16 + \
                row[4] * 8 + \
                row[5] * 4 + \
                row[6] * 2 + \
                row[7] * 1
            tiles_hex_str += "0x" + format(byte, '02x') + ", "
        tiles_hex_str += "\n"

    c_src = '''// Auto-generated by pnggb.py by Angus Goucher
#ifndef {}_H
#define {}_H
const int8_t {}_tiles[] = {{ {} }};
#endif // {}_H'''.format(
        name.upper(),
        name.upper(),
        name, 
        tiles_hex_str,
        name.upper())

    # Print to stdout
    print(c_src)


if __name__ == "__main__":
    main()
